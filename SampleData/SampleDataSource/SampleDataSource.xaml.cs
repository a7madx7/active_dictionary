//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.

using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Windows;

namespace Active_Dictionary.SampleData.SampleDataSource
{
// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class SampleDataSource { }
#else

    internal sealed class SampleDataSource : INotifyPropertyChanged
    {
        public SampleDataSource()
        {
            try
            {
                var resourceUri =
                    new Uri("/Active Dictionary;component/SampleData/SampleDataSource/SampleDataSource.xaml",
                        UriKind.RelativeOrAbsolute);
                Application.LoadComponent(this, resourceUri);
            }
            catch
            {
                // ignored
            }
        }

        public ItemCollection Collection = new ItemCollection();
        public event PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    public class Item : INotifyPropertyChanged
    {
        private string _property1 = string.Empty;
        private string _property2 = string.Empty;

        public string Property1
        {
            get { return _property1; }

            set
            {
                if (_property1 == value) return;
                _property1 = value;
                OnPropertyChanged("Property1");
            }
        }

        public string Property2
        {
            get { return _property2; }

            set
            {
                if (_property2 == value) return;
                _property2 = value;
                OnPropertyChanged("Property2");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    public class ItemCollection : ObservableCollection<Item>
    {
    }
#endif
}